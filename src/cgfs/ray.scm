(define-module (cgfs ray))

(use-modules (cgfs constants)
             (cgfs pixel)
             (cgfs math)
             (cgfs vec)
             (cgfs sphere))

(define-public (trace-ray spheres O D tmin tmax)
  (define closest_t (inf))
  (define closest_sphere 0)
  (for-each (lambda (sphere)
              (let ((tpair (intersect-ray-sphere O D sphere)))
                (begin (if (and (inrange (car tpair) tmin tmax) (< (car tpair) closest_t))
                           (begin (set! closest_t (car tpair))
                                  (set! closest_sphere sphere)))
                       (if (and (inrange (cdr tpair) tmin tmax) (< (cdr tpair) closest_t))
                           (begin (set! closest_t (cdr tpair))
                                  (set! closest_sphere sphere))))))
            spheres)
  (if (sphere? closest_sphere)
      (sphere-color closest_sphere)
      BACKGROUND-COLOR))

(define-public (intersect-ray-sphere O D sphere)
  (let ((r (sphere-radius sphere))
        (CO (vsub O (sphere-pos sphere))))
    (let ((a (vdot D D))
          (b (* (vdot CO D) 2))
          (c (- (vdot CO CO) (* r r))))
      (let ((discriminant (- (* b b)
                             (* 4 a c))))
        (if (< discriminant 0)
            (cons (inf) (inf))
            (cons (/ (+ (neg b)
                        (sqrt discriminant))
                     (* 2 a))
                  (/ (- (neg b)
                        (sqrt discriminant))
                     (* 2 a))))))))
